class myclass:

    def __init__(self, num):
        self.num = num

    def __add__(self, other):
        return self.num*other.num

    def __mul__(self, other):
        return self.num+other.num

a = myclass(5)
b = myclass(10)
# print(a+b)
# print(a*b)

data = ['1', '2', '3', '4', '4']
result = True if '4'*2 in "".join(data) else False
# print('4'*2)
data = "".join(data)
# print(data)
# print(result)

# num = int(input("Enter any number => "))
# data = [i for i in range(1, num) if num%i==0]
# print(data)

# Take two lists and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes.

# a = range(1, 10)
# b = range(8, 30)
# result = [i for i in a for j in b if j==i]
# print(result)

# if __name__ == '__main__':
#     n = int(input().strip())
#     if n%2 != 0:
#         print("Weird")
#     else:
#         if n >= 2 and n <= 5:
#             print("Not Weird")
#         if n >= 6 and n <= 20:
#             print("Weird")
#         if n > 20:
#             print("Not Weird")


# def is_leap(year):
#     leap = False
#
#     # Write your logic here
#     if ((year % 100 == 0) and (year % 400 == 0)) and (year % 4 == 0):
#         leap = True
#
#     return leap
#
#
# year = int(input())
# print(is_leap(year))

# thickness = int(input()) #This must be an odd number
# c = 'H'

# #Top Cone
# for i in range(thickness):
#     print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))
#
# #Top Pillars
# for i in range(thickness+1):
#     print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))
#
# #Middle Belt
# for i in range((thickness+1)//2):
#     print((c*thickness*5).center(thickness*6))
#
# #Bottom Pillars
# for i in range(thickness+1):
#     print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))
#
# #Bottom Cone
# for i in range(thickness):
#     print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))

# str = "abcdwghijkfghlmnopqrstuvwxyz"
# width = 5
# # str_list = list(str)
# newstr = ""
# for i in range(0, len(str), width):
#     newstr += str[i:i+width]
#     newstr += "\n"
# print(newstr)


# n = int(input())
# a = n//2
# first = a+1
# last = a
# max_width = n*3
# for i in range(1, first):
#     str = ".|."*(i*2-1)
#     print(str.center(max_width, "-"))
# print("WELCOME".center(max_width, "-"))
# for i in range(last, 0, -1):
#     str = ".|."*(i*2-1)
#     print(str.center(max_width, "-"))


# def dec_2_binary(decimal):
#     temp = ""
#     div = decimal // 2
#     if decimal < 2:
#         div = decimal
#     temp += str(div % 2)
#     import pdb; pdb.set_trace()
#     while div != 0:
#         temp += str(div % 2)
#         div = div // 2
#         import pdb;
#         pdb.set_trace()
#     return temp[::-1]
#
# print(dec_2_binary(2))
#
# def dec_2_octal(decimal):
#     temp = ""
#     div = decimal // 8
#     if decimal < 8:
#         div = decimal
#     temp += str(div % 8)
#     while div != 0 and decimal > 7:
#         temp += str(div % 8)
#         div = div // 8
#     return temp[::-1]
# print(dec_2_octal(8))
#
# def dec_2_hex(decimal):
#     temp = ""
#     div = decimal // 16
#     if decimal < 16:
#         div = decimal
#     hex_dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 'A', '11': 'B', '12': 'C', '13': 'D', '14': 'E', '15': 'F'}
#     # import pdb; pdb.set_trace()
#     temp += str(hex_dict[str(div % 16)])
#     while div != 0 and decimal > 15:
#         temp += str(hex_dict[str(div % 16)])
#         div = div // 16
#     return temp[::-1]
#
# print(dec_2_hex(16))
#

# n = int(input())
# for i in range(n):
#     print(i+1, oct(i+1)[2:], hex(i+1)[2:], bin(i+1)[2:])





# import string
# alpha = string.ascii_lowercase
#
# n = int(input())
# L = []
# for i in range(n):
#     s = "-".join(alpha[i:n])
#     L.append((s[::-1]+s[1:]).center(4*n-3, "-"))
# print('\n'.join(L[:0:-1]+L))


# s = "1 w 2 r 3g"
# for x in s.split():
#     s = s.replace(x, x.capitalize())
# print(s)
#
# s = "gautam kumar"
# print(s[:].split())



# s = "gautam"
#
# vowels = 'aeiou'
#
# kevsc = 0
# stusc = 0
# for i in range(len(s)):
#     if s[i].lower() in vowels:
#         kevsc += (len(s)-i)
#     else:
#         stusc += (len(s)-i)
#
# if kevsc > stusc:
#     print("Kevin", kevsc)
# elif kevsc < stusc:
#     print("Stuart", stusc)
# else:
#     print("Draw")
#

#
# str = "AABCAAADA"
# width = 3
# temp = []
# for i in range(0, len(str), 3):
#     temp.append(str[i:width+i])
# print(temp)
#
# for j in temp:
#     first_character = j[0]
#     if first_character in j[1:]:
#         print(j[1:].replace(first_character, ""))
#     # print(j)
#
#


# for part in zip(*[iter('abcdefghi')]*3):
# 	print(part)
#
# print(list(zip(*[iter('abcdefghi')]*3)))
# name = "gautam"
# for key,value in enumerate(dir(name)):
#     if '__' not in value:
#         print(getattr(getattr(str, value), '__doc__'))
#
# if hasattr(getattr(str,'lower'),'__doc__'):
#     print(getattr( getattr(str,'lower'), '__doc__'))
# print(getattr(getattr(str, 'lower'), '__doc__'))

data = [10, 20, 20, 10, 10, 30, 50, 10, 20]
# temp = []
# seq = []
# for i in range(len(data)):
#     number = data[i]
#     if number not in seq:
#         seq.append(number)
#         temp.append(data.count(number))
# count = 0
# for i in temp:
#     count += i//2
# print(count)

# print(max(0, max(data)))

arr = [[1, 2, 3], [4, 5, 6], [9, 8, 9]]
# first_diagonal = 0
# second_diagonal = 0
# max_length = len(arr) - 1
# for i in arr:
#     for j in range(len(i)):
#         first_diagonal += arr[j][j]
#         second_diagonal += arr[j][max_length - j]
#     break
#
# print(abs(first_diagonal-second_diagonal))

# arr = [-4, 3, -9, 0, 4, 1]
# pos_number = 0
# neg_number = 0
# zero_number = 0
# for i in arr:
#     if i == 0:
#         zero_number += 1
#     if i > 0:
#         pos_number += 1
#     if i < 0:
#         neg_number += 1
# arr_len = len(arr)
# print('%.6f'%(pos_number/arr_len))
# print('%.6f'%(neg_number/arr_len))
# print('%.6f'%(zero_number/arr_len))
# n = 6
# for i in range(n):
#     print(" "*(n-i-1)+"#"*(i+1))

# arr = [3,4,2,3,21]
# temp = arr[::-1]
# max = max(arr)
# arr.remove(max)
# min_sum = sum(arr)
# min = min(temp)
# temp.remove(min)
# max_sum = sum(temp)
# print(min_sum)
# print(max_sum)

# arr = [3, 2, 1, 3]
# age = max(arr)
# total = 0
# for i in arr:
#     if age == i:
#         total += 1
# print(total)

#
# def timeConversion(s):
#     #
#     # Write your code here.
#     #
#     new_time = ""
#     date = s.split(":")
#     if "PM" in s:
#         new_time = str(int(date[0]) + 12 if int(date[0]) != 12 else date[0]) + ":" + (date[1]) + ":" + date[2].replace(
#             "PM", "")
#     else:
#         new_time = str(date[0] if int(date[0]) != 12 else "00") + ":" + (date[1]) + ":" + date[2].replace(
#             "PM", "")
#         new_time = new_time.replace("AM", "")
#     print(new_time)
#
# timeConversion("12:45:54PM")

# from collections import namedtuple
# Student = namedtuple('Student', ['name', 'age', 'CLASS'])
# s1 = Student('gautam', 25, 9)
# s2 = Student('raaj', 26, 10)
# print(s1.CLASS)

# import math
# def gradingStudents(grades):
#     # Write your code here
#     temp = []
#     for i in grades:
#         grade = i
#         # import pdb; pdb.set_trace()
#         rem = i%5
#         if rem >= 3:
#             div = i/5
#             grade = (math.ceil(div)*5)
#             if grade < 40:
#                 grade = i
#         temp.append(grade)
#     return temp
#
# result = gradingStudents([73, 67, 38, 33])
# print(result)

# Apple / Orange Problems
# def countApplesAndOranges(s, t, a, b, apples, oranges):
#     apple_landing = [i+a for i in apples]
#     orange_landing = [i+b for i in oranges]
#     apple_on_house = [i for i in apple_landing if i >= s and i <= t]
#     orange_on_house = [i for i in orange_landing if i >= s and i <= t]
#     print(len(apple_on_house))
#     print(len(orange_on_house))
#
# countApplesAndOranges(7, 10, 4, 12, [2, 3, -4], [3, -2, -4])

# def kangaroo(x1, v1, x2, v2):
#     x1v1 = x1 + v1
#     x2v2 = x2 + v2
#     result = "NO"
#     count = 0
#     while count <= 10000:
#         if x1v1 == x2v2:
#             result = 'YES'
#             break
#         x1v1 += v1
#         x2v2 += v2
#         count += 1
#     return result
#
# result = kangaroo(2564, 5393, 5121, 2836)
# print(result)

# def getTotalX(a, b):
#     # First LCM of a
#     lcm = []
#     x = 1
#     while x <= min(b):
#         for y in a:
#             if x%y!=0:
#                 x+=1
#                 break
#         else:
#             lcm.append(x)
#             x+=1
# 		#HCF of b
#     hcf = 1
#     for x in range(1,min(b)+1):
#         for y in b:
#             if y%x!=0:
#                 break
#         else:
#             hcf=x
# 		# Final check
#     count = len(lcm)
#     for x in lcm:
#         if hcf%x!=0:
#             count-=1
#     return count


# first_multiple_input = input().rstrip().split()
#
# n = int(first_multiple_input[0])
#
# m = int(first_multiple_input[1])
#
# arr = list(map(int, input().rstrip().split()))
#
# brr = list(map(int, input().rstrip().split()))
# print(arr, brr)
# result = getTotalX([2, 4], [16, 32, 96])
# print(result)


# def breakingRecords(scores):
#     max_num = scores[0]
#     min_num = scores[0]
#     max_temp = set()
#     min_temp = set()
#     for i in scores:
#         if i > max_num:
#             max_num = i
#             max_temp.add(i)
#         if i < min_num:
#             min_num = i
#             min_temp.add(i)
#     return (str(len(max_temp))+" "+str(len(min_temp)))
#
# data = "171645 4199460 1792941 7634143 5126340 8930592 3440006 6437607 3736481 3236750 5410071 17094 8636427 5856681 4534760 666362 511247 2277874 4070151 7072691 9130059 8311177 6651100 8537755 3390569 516039 93759 3338879 8624243 6066083 345618 4511761 1714620 3593758 7118005 4981262 1786085 4050835 8557577 9057470 9879447 997843 696642 2333744 8548635 7996240 5448625 167471 4597637 2964368 9444031 8296411 1670774 4683653 5152188 239202 3614632 4528194 2660120 9148511 5694470 5119362 9569105 8522692 4264415 6015088 4649043 54914 1775098 6764521 8796042 7558923 2613472 1754652 9365408 1598701 3180618 1535678 2337600 7132817 1561783 626813 7875758 7963348 5652998 2178143 4034296 1892418 6856888 7037713 4882937 6614879 5687181 5813279 8225281 9743149 6410355 1514243 1384394 4336969 9338164 652785 121235 436580 2358626 4613124 21643412 10321472 29478561 10355376 24297200 2777259 1551192 25410020 18731797 19039332 21394807 16975125 9470025 5770518 15218703 4286568 1627997 2929062 1175495 9026753 24895667 16412955 16088218 17682447 26786318 13122680 12596600 1579871 22642215 8911630 1880383 19839386 8138942 14831292 3729238 973485 5841114 14138118 18455769 1782052 18775048 8439564 20035242 3554626 15746177 25654727 6080806 1451293 14858914 3750538 20589687 22345763 20186816 18192837 18537150 2891024 9812326 188198 6890024 17741377 15337433 20479113 926570 15954340 18562048 23069990 18775254 5398888 2215986 27837360 23682967 8481686 14578973 13659213 24969413 24237902 19913047 6774143 16996478 351454 22766066 19626614 17219901 25536094 28766285 2065375 25228191 11360898 161650 6325217 1553406 17126966 20529190 935126 26945945 181548 1140729 11486035 1311721 12912870 10611936 14633611 7921659 26196347 26163676 16443429 1341035 4716239 7787857 16688598 1544299 9878517 22849013 15222011 863033 28251445 12169480 10887800 13912269 4747153 19722063 18225732 5077329 7186028 389689 22648044 14080125 16191721 29091113 23228928 9964966 12541820 14698133 17341938 5446472 19119052 23696025 28424338 1063107 16687597 1491345 14175841 22262203 16259664 6897647 14496519 1651670 14013412 203665 5042910 3760793 26232025 11823098 6462876 15783082 17371706 1272467 4898601 7031462 11750690 16179562 16224427 2321902 3997387 679541 24966056 18618611 18243504 26154446 32619 22873206 12538308 27336225 26156695 24027879 3729501 9387299 1285025 2538119 26424472 11275414 22920698 17788611 5468439 1093287 1013289 4557735 19784870 11321211 21794353 29098006 20672883 25894135 16023563 629376 3668971 39054917 22131520 48086576 51119289 4151721 13015412 408528 28286121 29174551 263533 30937033 41690567 32087028 53182478 20478519 24937547 3657471 679668 1991730 30966614 25194239 22679259 51998660 33349210 21178559 54362120 59245511 24079464 13999523 14365296 24213392 19527830 154614 5047614 34499159 2289795 19812606 4064518 46687139 80829 49922824 10297643 48748342 30833579 1739051 47542259 59534422 4156011 43640291 57745380 20234206 52749200 41276933 27074431 22556503 46046124 47954562 11980366 5653579 14583473 38229172 8477778 19428525 14118982 56870118 31440970 7652241 32383841 32792945 27225952 44833532 42845127 9548547 4467351 47955791 22527461 11632909 39181262 18788084 44579307 40380959 43095231 15343153 47211432 25037344 18418251 27725812 17875324 3115224 2725542 36889852 20478684 31474595 54633253 28076543 16037235 5565542 6623408 24711539 44077498 43588576 34936112 14075479 23637803 5610464 14674424 26816350 6072134 9745758 33986329 50250652 31612509 59472383 26941242 743461 49265509 23747193 37439129 27245762 33219728 37840278 5045599 58079964 13396630 32315825 31164377 47739228 28699023 16329155 21744589 41691709 49841005 45444424 53477927 38757066 20762765 49724512 5643029 7662450 41146551 7515323 12861104 50387814 27998866 12133097 5582289 35869905 9412765 823428 9220869 474699 346896 41168351 52550040 20142289 39125428 2127520 8444867 8695715 28561360 123540 24986323 39766944 8820479 1246132 10063571 58341335 21972747 23896745 38773191 58635730 21929350 20217855 41787641 17034302 158735 1949002 41060343 9876850 22395375 53438523 49826517 21062118 6438600 1538403 39130601 48626762 55150088 41734168 48174540 4703082 27522664 23711037 40720735 8780182 31087221 45891409 29047620 69879 45707 86221 45094 84110 98012 75695 90948 24775 35646 41037 85744 69814 95118 60284 54636 14553 9911 93652 59342 20948 93011 96429 25187 89546 12540 28760 40956 20301 58851 88576 90180 4558 91149 51626 5020 89162 27321 95969 30289 62967 53358 32385 49133 64828 92670 20121 95733 18933 30125 55075 56234 23136 51505 81421 29034 80397 26534 69990 17050 85385 58567 23582 89943 49716 75208 11315 55230 2529 7284 1871 81848 76994 34257 47333 41823 43279 83806 53908 78564 13931 8984 34798 53419 76841 32572 82454 57238 59106 52444 90640 44491 27363 14222 50786 93432 5782 78453 48662 24663 85738 66886 22863 79084 17495 70196 37259 60774 54002 91168 39338 84285 152 90489 37704 93345 23061 20158 50583 98519 72603 57575 59362 16318 71797 26500 9750 93931 4953 74765 18594 7043 41651 41457 86128 59146 28005 23387 36272 98359 14555 91962 82644 31059 82451 20348 24404 21864 56859 91339 36735 29462 48914 96097 45780 37063 22597 71883 47346 43903 46648 65940 50946 88299 23749 53426 47445 51754 76814 69 50113 7721 92031 49109 55133 74483 69458 95889 12699 26317 87229 49435 72131 52495 45532 34263 5911 84482 6146 53257 28385 52794 35550 79331 57445 59299 32758 21242 11054 25924 21311 77519 49997 13343 26629 5130 4178 12439 1020 16877 55108 4601 66312 43591 57096 28197 77854 79359 29031 353 32617 57416 69499 68167 53099 26945 43818 2209 64539 54872 44485 85851 48744 94483 99194 75373 99613 19724 4164 16985 36601 59272 21586 19266 2863 95035 63815 97069 90746 92846 13774 23363 50262 83274 7882 19713 26571 51701 38275 91110 22925 82760 93313 71669 77243 8859 63394 93209 28583 67558 26546 81537 43182 48133 803 62397 59520 80970 75819 50266 73816 89593 89982 40430 89219 14216 76495 32142 82269 14770 23253 5195 97531 32918 93216 74774 41778 56611 84335 70361 40521 10882 68250 56 75367 85405 62453 51239 66375 54624 1505 40191 44218 7839 96973 49789 22056 73469 81932 4325 88239 21537 25872 85770 54455 19089 76897 96233 92052 77584 82947 48925 88466 51197 48981 80185 36603 27787 31424 2978 82411 49282 59522 26629 73473 72847 76419 11881 46316 74703 32559 50908 96240 58431 53030 50695 93872 46279 63281 2276 23864 62580 51202 28682 13777 183 8868 66732 27970 56644 86063 10382 22278 45585 53363 95752 34784 46134 7633 81101 20837 40192 48361 33429 14976 1391 477 8848 47671 63758 27477 71535 26338 78679 16569 56467 78862 25437 23200 23185 98434 9263 49919 20712 71200 3282 16464 5984 65769 40450 3437 86606 96994 51798 20036 11970 69542 20513 37171 17213 623 64648 5100 43313 43327 21669 99780 38541 63459 39332 61726 78245 48595 27997 98957 19795 31280 31774 42132 97049 72224 45569 7 69218 13720 36395 97541 83262 73260 34712 16827 73883 15712 38279 17196 59039 76300 33329 13932 56111 72661 92011 34356 37609 20008 49666 73756 67640 81440 15888 81041 70016 77810 81049 39234 7882 33796 53127 7496 7057 87839 40675 97292 3551 78954 30841 78942 71606 64170 92875 27718 53183 1238 78426 90792 21246 28092 64549 5239 25884"
# data = data.split(" ")
# data = [int(i) for i in data]
# result = breakingRecords(data)
# print(result)


# data = "171645 4199460 1792941 7634143 5126340 8930592 3440006 6437607 3736481 3236750 5410071 17094 8636427 5856681 4534760 666362 511247 2277874 4070151 7072691 9130059 8311177 6651100 8537755 3390569 516039 93759 3338879 8624243 6066083 345618 4511761 1714620 3593758 7118005 4981262 1786085 4050835 8557577 9057470 9879447 997843 696642 2333744 8548635 7996240 5448625 167471 4597637 2964368 9444031 8296411 1670774 4683653 5152188 239202 3614632 4528194 2660120 9148511 5694470 5119362 9569105 8522692 4264415 6015088 4649043 54914 1775098 6764521 8796042 7558923 2613472 1754652 9365408 1598701 3180618 1535678 2337600 7132817 1561783 626813 7875758 7963348 5652998 2178143 4034296 1892418 6856888 7037713 4882937 6614879 5687181 5813279 8225281 9743149 6410355 1514243 1384394 4336969 9338164 652785 121235 436580 2358626 4613124 21643412 10321472 29478561 10355376 24297200 2777259 1551192 25410020 18731797 19039332 21394807 16975125 9470025 5770518 15218703 4286568 1627997 2929062 1175495 9026753 24895667 16412955 16088218 17682447 26786318 13122680 12596600 1579871 22642215 8911630 1880383 19839386 8138942 14831292 3729238 973485 5841114 14138118 18455769 1782052 18775048 8439564 20035242 3554626 15746177 25654727 6080806 1451293 14858914 3750538 20589687 22345763 20186816 18192837 18537150 2891024 9812326 188198 6890024 17741377 15337433 20479113 926570 15954340 18562048 23069990 18775254 5398888 2215986 27837360 23682967 8481686 14578973 13659213 24969413 24237902 19913047 6774143 16996478 351454 22766066 19626614 17219901 25536094 28766285 2065375 25228191 11360898 161650 6325217 1553406 17126966 20529190 935126 26945945 181548 1140729 11486035 1311721 12912870 10611936 14633611 7921659 26196347 26163676 16443429 1341035 4716239 7787857 16688598 1544299 9878517 22849013 15222011 863033 28251445 12169480 10887800 13912269 4747153 19722063 18225732 5077329 7186028 389689 22648044 14080125 16191721 29091113 23228928 9964966 12541820 14698133 17341938 5446472 19119052 23696025 28424338 1063107 16687597 1491345 14175841 22262203 16259664 6897647 14496519 1651670 14013412 203665 5042910 3760793 26232025 11823098 6462876 15783082 17371706 1272467 4898601 7031462 11750690 16179562 16224427 2321902 3997387 679541 24966056 18618611 18243504 26154446 32619 22873206 12538308 27336225 26156695 24027879 3729501 9387299 1285025 2538119 26424472 11275414 22920698 17788611 5468439 1093287 1013289 4557735 19784870 11321211 21794353 29098006 20672883 25894135 16023563 629376 3668971 39054917 22131520 48086576 51119289 4151721 13015412 408528 28286121 29174551 263533 30937033 41690567 32087028 53182478 20478519 24937547 3657471 679668 1991730 30966614 25194239 22679259 51998660 33349210 21178559 54362120 59245511 24079464 13999523 14365296 24213392 19527830 154614 5047614 34499159 2289795 19812606 4064518 46687139 80829 49922824 10297643 48748342 30833579 1739051 47542259 59534422 4156011 43640291 57745380 20234206 52749200 41276933 27074431 22556503 46046124 47954562 11980366 5653579 14583473 38229172 8477778 19428525 14118982 56870118 31440970 7652241 32383841 32792945 27225952 44833532 42845127 9548547 4467351 47955791 22527461 11632909 39181262 18788084 44579307 40380959 43095231 15343153 47211432 25037344 18418251 27725812 17875324 3115224 2725542 36889852 20478684 31474595 54633253 28076543 16037235 5565542 6623408 24711539 44077498 43588576 34936112 14075479 23637803 5610464 14674424 26816350 6072134 9745758 33986329 50250652 31612509 59472383 26941242 743461 49265509 23747193 37439129 27245762 33219728 37840278 5045599 58079964 13396630 32315825 31164377 47739228 28699023 16329155 21744589 41691709 49841005 45444424 53477927 38757066 20762765 49724512 5643029 7662450 41146551 7515323 12861104 50387814 27998866 12133097 5582289 35869905 9412765 823428 9220869 474699 346896 41168351 52550040 20142289 39125428 2127520 8444867 8695715 28561360 123540 24986323 39766944 8820479 1246132 10063571 58341335 21972747 23896745 38773191 58635730 21929350 20217855 41787641 17034302 158735 1949002 41060343 9876850 22395375 53438523 49826517 21062118 6438600 1538403 39130601 48626762 55150088 41734168 48174540 4703082 27522664 23711037 40720735 8780182 31087221 45891409 29047620 69879 45707 86221 45094 84110 98012 75695 90948 24775 35646 41037 85744 69814 95118 60284 54636 14553 9911 93652 59342 20948 93011 96429 25187 89546 12540 28760 40956 20301 58851 88576 90180 4558 91149 51626 5020 89162 27321 95969 30289 62967 53358 32385 49133 64828 92670 20121 95733 18933 30125 55075 56234 23136 51505 81421 29034 80397 26534 69990 17050 85385 58567 23582 89943 49716 75208 11315 55230 2529 7284 1871 81848 76994 34257 47333 41823 43279 83806 53908 78564 13931 8984 34798 53419 76841 32572 82454 57238 59106 52444 90640 44491 27363 14222 50786 93432 5782 78453 48662 24663 85738 66886 22863 79084 17495 70196 37259 60774 54002 91168 39338 84285 152 90489 37704 93345 23061 20158 50583 98519 72603 57575 59362 16318 71797 26500 9750 93931 4953 74765 18594 7043 41651 41457 86128 59146 28005 23387 36272 98359 14555 91962 82644 31059 82451 20348 24404 21864 56859 91339 36735 29462 48914 96097 45780 37063 22597 71883 47346 43903 46648 65940 50946 88299 23749 53426 47445 51754 76814 69 50113 7721 92031 49109 55133 74483 69458 95889 12699 26317 87229 49435 72131 52495 45532 34263 5911 84482 6146 53257 28385 52794 35550 79331 57445 59299 32758 21242 11054 25924 21311 77519 49997 13343 26629 5130 4178 12439 1020 16877 55108 4601 66312 43591 57096 28197 77854 79359 29031 353 32617 57416 69499 68167 53099 26945 43818 2209 64539 54872 44485 85851 48744 94483 99194 75373 99613 19724 4164 16985 36601 59272 21586 19266 2863 95035 63815 97069 90746 92846 13774 23363 50262 83274 7882 19713 26571 51701 38275 91110 22925 82760 93313 71669 77243 8859 63394 93209 28583 67558 26546 81537 43182 48133 803 62397 59520 80970 75819 50266 73816 89593 89982 40430 89219 14216 76495 32142 82269 14770 23253 5195 97531 32918 93216 74774 41778 56611 84335 70361 40521 10882 68250 56 75367 85405 62453 51239 66375 54624 1505 40191 44218 7839 96973 49789 22056 73469 81932 4325 88239 21537 25872 85770 54455 19089 76897 96233 92052 77584 82947 48925 88466 51197 48981 80185 36603 27787 31424 2978 82411 49282 59522 26629 73473 72847 76419 11881 46316 74703 32559 50908 96240 58431 53030 50695 93872 46279 63281 2276 23864 62580 51202 28682 13777 183 8868 66732 27970 56644 86063 10382 22278 45585 53363 95752 34784 46134 7633 81101 20837 40192 48361 33429 14976 1391 477 8848 47671 63758 27477 71535 26338 78679 16569 56467 78862 25437 23200 23185 98434 9263 49919 20712 71200 3282 16464 5984 65769 40450 3437 86606 96994 51798 20036 11970 69542 20513 37171 17213 623 64648 5100 43313 43327 21669 99780 38541 63459 39332 61726 78245 48595 27997 98957 19795 31280 31774 42132 97049 72224 45569 7 69218 13720 36395 97541 83262 73260 34712 16827 73883 15712 38279 17196 59039 76300 33329 13932 56111 72661 92011 34356 37609 20008 49666 73756 67640 81440 15888 81041 70016 77810 81049 39234 7882 33796 53127 7496 7057 87839 40675 97292 3551 78954 30841 78942 71606 64170 92875 27718 53183 1238 78426 90792 21246 28092 64549 5239 25884"
# data = data.split(" ")
# data = [int(i) for i in data]
# print(data)


# def birthday(s, d, m):
#     return len([1 for i in range(len(s) - m + 1) if sum(s[i:i + m]) == d])
#
#
# s = [2, 5, 1, 3, 4, 4, 3, 5, 1, 1, 2, 1, 4, 1, 3, 3, 4, 2, 1]
# d = 18
# m = 7
# rs = birthday(s, d, m)
# print(rs)
# rs = birthday([1, 2, 1, 3, 2], 3, 2)
# print(rs)


# def divisiblesumpairs(n, k, arr):
#     temp = []
#     count = 0
#     for i in arr:
#         for j in arr[count+1:]:
#             print(i, j, i+j, (i+j)%k)
#             if (i+j) % k == 0:
#                 temp.append((i, j))
#         count += 1
#     return len(temp)
#
#
# data = "43 95 51 55 40 86 65 81 51 20 47 50 65 53 23 78 75 75 47 73 25 27 14" \
#        " 8 26 58 95 28 3 23 48 69 26 3 73 52 34 7 40 33 56 98 71 29 70 71 28 12" \
#        " 18 49 19 25 2 18 15 41 51 42 46 19 98 56 54 98 72 25 16 49 34 99 48 93 64" \
#        " 44 50 91 44 17 63 27 3 65 75 19 68 30 43 37 72 54 82 92 37 52 72 62 3 88 82 71"
# data = data.split(" ")
# data = [int(i) for i in data]
# rs = divisiblesumpairs(100, 22, data)
# print(rs)

# def get_second_max(arr):
#     print(type(arr))
#     return max(arr)
#
# def converter(arr):
#     print(type(arr[0]))
#     return arr
#     # return "".join([str(i) for i in arr])
#
# def total_number(arr):
#     print(arr)
#     return 3
#
# def migratoryBirds(arr):
#     return (max((arr), key=arr.count))
#
#
# arr = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1]
# print(arr.count(1))
# print(arr.count(2))
# rs = migratoryBirds(arr)
# print(rs)

# def magic_square(number):
#     magicSquare = [[0 for i in range(number)] for j in range(number)]
#     n = 1
#     i, j = 0, number//2
#     while n <= number**2:
#         print(n, i, j)
#         magicSquare[i][j] = n
#         n += 1
#         newi = (i-1)%number
#         newj = (j+1)%number
#         if magicSquare[newi][newj]:
#             i += 1
#         else:
#             i, j = newi, newj
#     print(magicSquare)
#
#
# magic_square(5)


# find largest sum of adjacent element

# def maximum_path(arr):
#     num = 0
#     max_number = max(arr[-1])
#     index_of_max_number = arr[-1].index(max_number)
#     length = len(arr[-1])
#     right = False
#     if index_of_max_number >= length // 2:
#         right = True
#
#     for i in range(len(arr) - 1, -1, -1):
#         length = len(arr[i])
#         if right:
#             max_number = max(arr[i][length // 2:])
#         else:
#             max_number = arr[i][0] if length == 1 else max(arr[i][:length // 2])
#         num += max_number
#     print(num)
#
#
# maximum_path([[2], [5, 4], [3, 4, 7], [1, 6, 9, 6]])
# maximum_path([[1], [1, 2], [4, 1, 2], [2, 3, 1, 1]])
# maximum_path([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]])
# maximum_path([[2], [4, 1], [1, 2, 7]])
# TEG, VINAY

# Cloud jumping problem
# def cloudJumpling(arr):
#     num = 0
#     prev = [0, 0]
#     for i in range(len(arr)):
#         if i != 1:
#             print(arr[i+1:i+3], prev)
#
#             if 1 in arr[i+1:i+3] or (arr[i+1:i+3] == [0, 0] and prev != [0, 0]):
#                 num += 1
#             prev = arr[i+1:i+3]
#     print(num)
#
#
# # cloudJumpling([0, 0, 1, 0, 0, 1, 0])
# # cloudJumpling([0, 0, 0, 0, 1, 0])
# cloudJumpling([0, 0, 1, 0, 0, 0, 0, 1, 0, 0])
import math
def repeatedString(s, n):
    return s.count("a") * (n // len(s)) + s[:n % len(s)].count("a")
    # print(s.count("a"))
    # print((s.count("a")*n/len(s)))
    # if len(s)%2 == 0:
    #     return math.floor(s.count("a")*n/len(s))
    # else:
    #     return round(s.count("a") * n / len(s))
    # return n if s == "a" else buffer(str(s*n)[:n].count("a"))
# 51574523448

# rs = repeatedString("epsxyyflvrrrxzvnoenvpegvuonodjoxfwdmcvwctmekpsnamchznsoxaklzjgrqruyzavshfbmuhdwwmpbkwcuomqhiyvuztwvq", 549382313570)
# print(rs)
# import os
# print(os.path.expanduser("~"))

# import re
# print(re.search(r"[0-9a-zA-Z.]+@[a-zA-Z]+\.(com|co\.in)$", "gautamcs22@gmail.com"))

# a = range(10)
# print(list(a[::]))
# import math
# a = 10.99
# print(math.trunc(a))
#
# print(type(__name__))

import base64
string = base64.b32decode("NBQWG23FOJZGC3TL")
print(base64.b64encode(string))